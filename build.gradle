import org.jooq.meta.jaxb.Logging
import groovy.json.JsonSlurper

buildscript {
    configurations['classpath'].resolutionStrategy.eachDependency {
        if (requested.group == 'org.jooq') {
            useVersion '3.17.3'
        }
    }

    dependencies {
        classpath('org.postgresql:postgresql:42.6.0')
        classpath 'org.flywaydb:flyway-core:10.0.0'
        classpath("org.flywaydb:flyway-database-postgresql:10.0.0")
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'nu.studer.jooq' version '8.2.1'
    id "org.flywaydb.flyway" version "10.2.0"
}

group = 'com.fejiro.exploration.dictionary'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

//configurations {
//    compileOnly {
//        extendsFrom annotationProcessor
//    }
//
//    flywayMigration
//}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.boot:spring-boot-starter-oauth2-authorization-server"
    implementation "commons-validator:commons-validator:1.8.0"
    // TODO: REPLACE jjwt with a jwt library that complies with JavaEE (Jakarta)
    implementation "io.jsonwebtoken:jjwt:0.9.1"
    implementation "io.jsonwebtoken:jjwt-impl:0.11.5"
//    implementation 'org.flywaydb:flyway-core:10.2.0'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation('org.postgresql:postgresql:42.6.0')
    jooqGenerator('org.postgresql:postgresql:42.6.0')
//    flywayMigration('org.postgresql:postgresql:42.6.0')
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Load Database config from environment
Map<String, Object> dbConfig = [
        url     : System.getenv("DICTIONARY_DB_URL") ?: "",
        schemas : (System.getenv("DICTIONARY_DB_SCHEMAS") ?: "PUBLIC").split(",").collect {
            return it.trim()
        },
        user    : System.getenv("DICTIONARY_DB_USER") ?: "default",
        password: System.getenv("DICTIONARY_DB_PASSWORD") ?: ""
]

if (!dbConfig.url.isEmpty()) {
    dbConfig.url = "jdbc:${dbConfig.url}"
}

flyway {
    url = dbConfig.get("url")
    user = dbConfig.get("user")
    password = dbConfig.get("password")
    driver = 'org.postgresql.Driver'
    baselineOnMigrate = true
//    schemas = dbConfig.get("schemas")
//    configurations = ['flywayMigration']
    locations = ["filesystem:src/main/resources/db/migration"]
}

jooq {
    version = '3.18.4'  // the default (can be omitted)
    edition = nu.studer.gradle.jooq.JooqEdition.OSS  // the default (can be omitted)

    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = true  // default (can be omitted)

            generationTool {
                logging = Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = dbConfig.get("url")
                    user = dbConfig.get("user")
                    password = dbConfig.get("password")
//                    properties {
//                        property {
//                            key = 'ssl'
//                            value = 'true'
//                        }
//                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        forcedTypes {
//                            forcedType {
//                                name = 'varchar'
//                                includeExpression = '.*'
//                                includeTypes = 'JSONB?'
//                            }
//                            forcedType {
//                                name = 'varchar'
//                                includeExpression = '.*'
//                                includeTypes = 'INET'
//                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'com.fejiro.exploration.dictionary.dictionary_web_api'
                        directory = 'build/generated-src/jooq/main'  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

tasks.register('show_db_config') {
    doLast {
        println("DATABASE CONFIG VALUES;")
        println(dbConfig)
    }
}

tasks.named("flywayMigrate") {
    dependsOn("show_db_config")
}

/**
 * Check the state that the test database container is in.
 * Available States:
 *  created, restarting, running, removing, paused, exited and dead
 */
String checkTestDbContainerState() {
    def checkOutput = new ByteArrayOutputStream().withStream { scriptOutputStream ->
        exec {
            workingDir(".")
            commandLine "bash", "check_dev_docker_db_status.sh"
            standardOutput = scriptOutputStream
        }
        return scriptOutputStream.toString()
    }

    def parsedOutput = (new JsonSlurper().parseText(checkOutput) as ArrayList)[0] as Map<String, Object>


    return parsedOutput.get("State") as String
}

// configure jOOQ task such that it only executes when something has changed that potentially affects the generated JOOQ sources
// - the jOOQ configuration has changed (Jdbc, Generator, Strategy, etc.)
// - the classpath used to execute the jOOQ generation tool has changed (jOOQ library, database driver, strategy classes, etc.)
// - the schema files from which the schema is generated and which is used by jOOQ to generate the sources have changed (scripts added, modified, etc.)
tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn tasks.named('flywayMigrate')

//    // declare Flyway migration scripts as inputs on the jOOQ task
//    inputs.files(fileTree('src/main/resources/db/migration'))
//            .withPropertyName('migrations')
//            .withPathSensitivity(PathSensitivity.RELATIVE)
//
//    // make jOOQ task participate in incremental builds (and build caching)
//    allInputsDeclared = true
//    outputs.cacheIf { true }
}

tasks.register('startTestDbContainer') {
    // Start the test db container
    exec {
        workingDir(".")
        commandLine "bash", "start_dev_docker_db.sh"
    }

    // Make sure that it has been started
    def containerState = checkTestDbContainerState()
    println(containerState)
}

tasks.register('stopTestDbContainer') {
    exec {
        workingDir(".")
        commandLine "bash", "stop_dev_docker_db.sh"
    }
}

tasks.register("flywayTestMigrate") {
    dependsOn tasks.named("startTestDbContainer"), tasks.named('flywayMigrate')
}

tasks.register('generateTestJooq') {
    dependsOn tasks.named("flywayTestMigrate"), tasks.named("generateJooq")

}
